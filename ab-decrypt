#!/usr/bin/python3

from getpass import getpass
from os import environ
from sys import argv, stdin, stdout
from zlib import decompressobj

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC


class Decompressor:
    def __init__(self, stream):
        self.stream = stream
        self.decompressor = decompressobj()

    def write(self, buf):
        self.stream.write(self.decompressor.decompress(buf))

    def flush(self):
        self.stream.write(self.decompressor.flush())
        self.stream.flush()


class PKCS7Unpadder:
    def __init__(self, stream):
        self.stream = stream
        self.unpadder = padding.PKCS7(128).unpadder()

    def write(self, buf):
        self.stream.write(self.unpadder.update(buf))

    def flush(self):
        self.stream.write(self.unpadder.finalize())
        self.stream.flush()


class Aes256Decryptor:
    def __init__(
        self,
        stream,
        user_password_salt: bytes,
        master_key_check_salt: bytes,
        pbkdf2_rounds: int,
        user_key_iv: bytes,
        master_key_blob: bytes,
    ) -> None:

        password = environ.get("AB_DECRYPT_PASSWORD")
        if password is None:
            password = getpass("Password: ")

        backend = default_backend()
        user_key = PBKDF2HMAC(
            algorithm=hashes.SHA1(),
            length=32,
            salt=user_password_salt,
            iterations=pbkdf2_rounds,
            backend=backend,
        ).derive(password.encode())
        cipher = Cipher(algorithms.AES(user_key), modes.CBC(user_key_iv), backend=backend)
        decryptor = cipher.decryptor()
        unpadder = padding.PKCS7(128).unpadder()
        blob = bytearray(
            unpadder.update(decryptor.update(master_key_blob) + decryptor.finalize()) + unpadder.finalize()
        )
        master_key_iv_len = blob[0]
        master_key_iv = blob[1 : master_key_iv_len + 1]
        del blob[: master_key_iv_len + 1]

        master_key_len = blob[0]
        master_key = blob[1 : master_key_len + 1]
        del blob[: master_key_len + 1]

        master_key_check_len = blob[0]
        if len(blob) - 1 != master_key_check_len:
            raise ValueError
        master_key_check_0 = bytes(blob[1:])

        master_key_check_1 = PBKDF2HMAC(
            algorithm=hashes.SHA1(),
            length=master_key_check_len,
            salt=master_key_check_salt,
            iterations=pbkdf2_rounds,
            backend=backend,
        ).derive(utf8_encode(master_key))

        if master_key_check_0 != master_key_check_1:
            raise ValueError("Bad password")

        self.stream = PKCS7Unpadder(stream)
        cipher = Cipher(algorithms.AES(master_key), modes.CBC(master_key_iv), backend=backend)
        self.decryptor = cipher.decryptor()

    def write(self, buf):
        self.stream.write(self.decryptor.update(buf))

    def flush(self):
        self.stream.write(self.decryptor.finalize())
        self.stream.flush()


def utf8_encode(buf):
    return "".join(chr(i if i < 0x80 else i + 0xFF00) for i in buf).encode()


def decrypt_backup(in_stream, out_stream):
    if in_stream.readline() != b"ANDROID BACKUP\n":
        raise ValueError("Bad magic")
    version = int(in_stream.readline())
    compressed = int(in_stream.readline())
    encr_algo = in_stream.readline().strip().decode()

    if compressed:
        out_stream = Decompressor(out_stream)

    if encr_algo == "none":
        pass
    elif encr_algo == "AES-256":
        user_password_salt = bytes.fromhex(in_stream.readline().strip().decode())
        master_key_check_salt = bytes.fromhex(in_stream.readline().strip().decode())
        pbkdf2_rounds = int(in_stream.readline())
        user_key_iv = bytes.fromhex(in_stream.readline().strip().decode())
        master_key_blob = bytes.fromhex(in_stream.readline().strip().decode())

        out_stream = Aes256Decryptor(
            out_stream, user_password_salt, master_key_check_salt, pbkdf2_rounds, user_key_iv, master_key_blob,
        )
    else:
        raise ValueError(f"Unknown encryption algorithm: {encr_algo}")

    while True:
        buf = in_stream.read(4096)
        if not buf:
            break
        out_stream.write(buf)
    out_stream.flush()


if len(argv) == 2:
    with open(argv[1], "rb") as fp:
        decrypt_backup(fp, stdout.buffer)
else:
    decrypt_backup(stdin.buffer, stdout.buffer)
